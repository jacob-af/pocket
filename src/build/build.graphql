type Build {
  id: ID!
  recipe: Recipe!
  buildName: String!
  createdAt: Date
  editedAt: Date
  createdBy: User
  createdById: String
  editedBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  image: String
  permission: Permission
  touch: [Touch!]!
  version: Int
  archivedBuild: [ArchivedBuild]
}

type BuildConstructor {
  name: String!
  buildName: String!
  about: String
  instructions: String
  ice: String
  image: String
  glassware: String
  isPublic: Boolean
  recipe: RecipeName
  touchArray: [CompleteTouch]!
  id: String!
  permission: Permission!
  newRecipe: Boolean!
}

type RecipeName {
  name: String
}

input CreateBuildInput {
  recipe: RecipeNameInput!
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  image: String
  isPublic: Boolean
  touchArray: [TouchInput]!
}

type ArchivedBuild {
  id: ID!
  buildId: String!
  buildName: String!
  createdAt: Date
  createdBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  version: Int
  archivedTouch: [ArchivedTouch]
}

type BuildUser {
  user: User!
  build: Build!
  permission: Permission
}

type BuildUser {
  build: Build
  user: User
  permission: Permission
}

type UserBuildPermission {
  user: User!
  permission: String
}

type ArchiveResponse {
  build: Build
  archivedBuild: ArchivedBuild
}

type BuildPermissionResponse {
  buildUser: BuildUser
  status: StatusMessage
}

input RecipeNameInput {
  name: String!
}

type Cost {
  cost: Float!
}

input CreateFirstBuildInput {
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  isPublic: Boolean
  touchArray: [TouchInput]!
}

input UpdateBuildInput {
  recipe: RecipeNameInput!
  buildId: String!
  buildName: String
  instructions: String
  glassware: String
  ice: String
  image: String
  isPublic: Boolean
  touchArray: [TouchInput]!
  permission: Permission
}

input UpdateManyBuildInput {
  name: String!
  about: String
  build: ManyBuildInput!
}

input ManyBuildInput {
  buildId: String
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  touchArray: [TouchInput]!
}

input ChangeBuildPermissionInput {
  userId: String
  buildId: String
  userPermission: Permission
  desiredPermission: Permission
}

type Query {
  findAllBuilds: [Build]
  findOneBuild(recipeName: String!, buildName: String!): Build
  findFolloweddUsersBuildPermission(buildId: String!): [UserBuildPermission]
  costBuild(buildId: String, inventoryId: String): Cost
}

type Mutation {
  createBuild(createBuildInput: CreateBuildInput): Build
  updateBuild(updateBuildInput: UpdateBuildInput): ArchiveResponse
  updateManyBuilds(updateManyBuildInput: [UpdateManyBuildInput]!): StatusMessage
  removeBuild(buildId: String, permission: Permission): Build
  changeBuildPermission(
    changeBuildPermissionInput: ChangeBuildPermissionInput
  ): BuildPermissionResponse
  deleteBuildPermission(
    changeBuildPermissionInput: ChangeBuildPermissionInput
  ): BuildPermissionResponse
}
