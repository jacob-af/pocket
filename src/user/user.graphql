type User {
  id: ID!
  userName: String!
  email: Email
  dateJoined: Date
  lastEdited: Date
  following: [Following]
  followedBy: [Follower]
  myBuild: [Build]
  allBuilds: [Build]
  buildEditedBy: [Build]
  profile: Profile
}

input UpdateUserInput {
  id: ID!
  userName: String
  email: String
}

type Following {
  id: ID!
  userName: String!
  email: Email
  dateJoined: Date
  lastEdited: Date
  relationship: Relationship
}

type Follower {
  id: ID!
  userName: String!
  email: Email
  dateJoined: Date
  lastEdited: Date
}

type StatusMessage {
  message: String
}

type FollowReturn {
  following: String
  relationship: Relationship
  status: StatusMessage
}

type UserRelation {
  id: String!
  userName: String!
  followedBy: Boolean!
  following: Boolean!
}

type Query {
  allUsers: [User]!
  userById(id: ID!): User
  findFollows: [User]
  findFollowers: [User]
  getUserRelationships: [UserRelation]
}

type Mutation {
  followUser(followId: String!, relationship: Relationship): StatusMessage
  unFollowUser(unfollowId: String!): StatusMessage
  blockUser(blockId: String!): StatusMessage
  unblockUser(unblockId: String!): StatusMessage
}
