generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  email              String           @unique @db.VarChar(100)
  userName           String           @unique @db.VarChar(255)
  dateJoined         DateTime         @default(now())
  lastEdited         DateTime         @default(now())
  password           String?          @db.VarChar(255)
  refreshToken       String?          @db.VarChar(255)
  followedBy         Follow[]         @relation("followedBy")
  following          Follow[]         @relation("following")
  recipe             Recipe[]
  recipeEditedBy     Recipe[]         @relation("recipeEditedById")
  blockedUser        BlockedUser[]    @relation("blocked")
  blockingUser       BlockedUser[]    @relation("blocking")
  buildCreatedBy     Build[]          @relation("buildCreatedBy")
  buildEditedBy      Build[]          @relation("buildEditedBy")
  archivedBuild      ArchivedBuild[]
  buildUser          BuildUser[]
  RecipeBook         RecipeBook[]
  recipeBookEditedBy RecipeBook[]     @relation("recipeBookEditedById")
  RecipeBookUser     RecipeBookUser[]
  inventory          Inventory[]      @relation("inventoryCreatedById")
  inventoryEditedBy  Inventory[]      @relation("inventoryEditedById")
  inventoryUser      InventoryUser[]
  Profile            Profile[]
  authMethods        AuthMethod[]
  storageUser        StorageUser[]
  storage            Storage[]
  storageEditedBy    Storage[]        @relation("storageEditedById")
}

model AuthMethod {
  id           Int           @id @default(autoincrement())
  userId       String
  authType     String
  user         User          @relation(fields: [userId], references: [id])
  passwordAuth PasswordAuth?
  oauthAuth    OAuthAuth?

  @@unique([userId, authType])
}

model PasswordAuth {
  authMethodId Int        @id
  password     String
  salt         String
  authMethod   AuthMethod @relation(fields: [authMethodId], references: [id])
}

model OAuthAuth {
  authMethodId   Int        @id
  provider       String
  providerUserId String     @unique
  accessToken    String?
  tokenExpiry    DateTime?
  authMethod     AuthMethod @relation(fields: [authMethodId], references: [id])
}

model Profile {
  id     String  @id @default(uuid())
  image  String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model Follow {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String
  relationship String

  @@id([followingId, followedById])
}

model BlockedUser {
  user           User   @relation("blocked", fields: [userId], references: [id])
  userId         String
  blockingUser   User   @relation("blocking", fields: [blockingUserId], references: [id])
  blockingUserId String

  @@id([userId, blockingUserId])
}

model Recipe {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  editedAt    DateTime @default(now())
  name        String   @unique @db.VarChar(255)
  about       String?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
  editedBy    User?    @relation("recipeEditedById", fields: [editedById], references: [id])
  editedById  String?
  build       Build[]
}

model Build {
  id              String            @id @default(uuid())
  buildName       String
  createdAt       DateTime          @default(now())
  createdById     String
  createdBy       User              @relation("buildCreatedBy", fields: [createdById], references: [id])
  editedAt        DateTime          @default(now())
  editedById      String
  editedBy        User              @relation("buildEditedBy", fields: [editedById], references: [id])
  instructions    String
  notes           String?
  glassware       String            @db.VarChar()
  ice             String            @db.VarChar(100)
  image           String?
  isPublic        Boolean
  touch           Touch[]
  archivedBuild   ArchivedBuild[]
  buildUser       BuildUser[]
  version         Int
  recipe          Recipe?           @relation(fields: [recipeName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  recipeName      String
  recipeBookBuild RecipeBookBuild[]
  Stock           Stock[]

  @@unique([buildName, recipeName])
}

model ArchivedBuild {
  id            String          @id @default(uuid())
  buildName     String          @default("")
  createdAt     DateTime        @default(now())
  createdById   String
  createdBy     User            @relation(fields: [createdById], references: [id])
  build         Build           @relation(fields: [buildId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildId       String
  instructions  String?
  notes         String?
  glassware     String?         @db.VarChar()
  ice           String?         @db.VarChar(100)
  version       Int
  archivedTouch ArchivedTouch[]
}

model BuildUser {
  userId     String
  buildId    String
  user       User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  build      Build? @relation(fields: [buildId], references: [id], onDelete: Cascade)
  permission String

  @@id([userId, buildId])
}

model Touch {
  id             String     @id @default(uuid())
  build          Build      @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId        String
  order          Int
  amount         Float      @db.Real
  unit           String?    @db.VarChar(50)
  ingredientName String
  ingredient     Ingredient @relation(fields: [ingredientName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  version        Int        @default(0)
  Unit           Unit?      @relation(fields: [unitAbb], references: [abbreviation])
  unitAbb        String?
}

model ArchivedTouch {
  id              String        @id @default(uuid())
  archivedBuild   ArchivedBuild @relation(fields: [archivedBuildId], references: [id], onDelete: Cascade)
  archivedBuildId String
  order           Int?
  amount          Float         @db.Real
  unit            String?       @db.VarChar(50)
  ingredientName  String
  ingredient      Ingredient?   @relation(fields: [ingredientName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  version         Int
  Unit            Unit?         @relation(fields: [unitAbb], references: [abbreviation])
  unitAbb         String?
}

model Ingredient {
  id            String               @id @default(uuid())
  name          String               @unique @db.VarChar(255)
  description   String?
  touch         Touch[]
  parents       IngredientRelation[] @relation("IngredientParent")
  children      IngredientRelation[] @relation("IngredientChild")
  archivedTouch ArchivedTouch[]
  stock         Stock[]
}

// Intermediate join table for the many-to-many relationship
model IngredientRelation {
  parent     Ingredient @relation("IngredientParent", fields: [parentName], references: [name])
  parentName String
  child      Ingredient @relation("IngredientChild", fields: [childName], references: [name])
  childName  String

  @@id([parentName, childName])
}

model Unit {
  id            String           @id @default(uuid())
  name          String           @unique
  abbreviation  String           @unique
  unitType      String?
  conversion    Float
  conversions   UnitConversion[] @relation("UnitConversionFrom")
  convertedFrom UnitConversion[] @relation("UnitConversionTo")
  Touch         Touch[]
  ArchivedTouch ArchivedTouch[]
  Stock         Stock[]
}

model UnitConversion {
  id         Int    @id @default(autoincrement())
  fromUnitId String
  toUnitId   String
  factor     Float
  fromUnit   Unit   @relation("UnitConversionFrom", fields: [fromUnitId], references: [id])
  toUnit     Unit   @relation("UnitConversionTo", fields: [toUnitId], references: [id])

  @@unique([fromUnitId, toUnitId])
}

model RecipeBook {
  id              String            @id @default(uuid())
  name            String            @unique @db.VarChar(255)
  description     String?
  isPublic        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  editedAt        DateTime          @default(now()) @updatedAt()
  createdById     String?
  editedById      String?
  createdBy       User?             @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editedBy        User?             @relation("recipeBookEditedById", fields: [editedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeBookBuild RecipeBookBuild[]
  recipeBookUser  RecipeBookUser[]
  //crewRecipeBook  CrewRecipeBook[]
}

model RecipeBookUser {
  userId       String
  recipeBookId String
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permission   String

  @@id([userId, recipeBookId])
}

model RecipeBookBuild {
  buildId      String
  recipeBookId String
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  build        Build      @relation(fields: [buildId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@id([buildId, recipeBookId])
}

model Inventory {
  id               String             @id @default(uuid())
  name             String             @db.VarChar(255)
  description      String
  createdAt        DateTime           @default(now())
  editedAt         DateTime           @default(now())
  createdById      String
  editedById       String
  createdBy        User?              @relation("inventoryCreatedById", fields: [createdById], references: [id])
  editedBy         User?              @relation("inventoryEditedById", fields: [editedById], references: [id])
  inventoryStorage InventoryStorage[]
  inventoryUser    InventoryUser[]
  inStock          Stock[]
  //  crewInventory       CrewInventory[]
}

model InventoryUser {
  userId      String
  inventoryId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission  String

  @@id([userId, inventoryId])
}

model InventoryStorage {
  inventoryId String
  storageId   String
  storage     Storage   @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([inventoryId, storageId])
}

model Storage {
  id          String             @id @default(uuid())
  name        String             @db.VarChar(255)
  description String             @default("") @db.VarChar(255)
  createdAt   DateTime           @default(now())
  editedAt    DateTime           @default(now())
  createdById String
  editedById  String
  createdBy   User?              @relation(fields: [createdById], references: [id])
  editedBy    User?              @relation("storageEditedById", fields: [editedById], references: [id])
  inventory   InventoryStorage[]

  //crewStorage       CrewStorage[]
  StorageUser StorageUser[]
}

model StorageUser {
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storageId  String
  storage    Storage @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission String

  @@id([userId, storageId])
}

model Stock {
  price          Float      @db.Real
  amount         Float      @db.Real
  unit           Unit       @relation(fields: [unitAbb], references: [abbreviation])
  buildRef       Build?     @relation(fields: [buildId], references: [id])
  createdAt      DateTime   @default(now())
  editedAt       DateTime   @default(now())
  ingredientName String
  unitAbb        String
  buildId        String?
  ingredient     Ingredient @relation(fields: [ingredientName], references: [name])
  inventory      Inventory  @relation(fields: [inventoryId], references: [id])
  inventoryId    String

  @@id([inventoryId, ingredientName])
}
